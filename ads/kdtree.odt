
AIM: To perform creation, insertion and traversal operation on a KD tree.

Theory:
A K-D Tree(also called as K-Dimensional Tree) is a binary search tree where data in each node is a K-Dimensional point in space. In short, it is a space partitioning data structure for organizing points in a K-Dimensional space.

K-D trees are a useful data structure for several applications, such as searches involving a multidimensional search key

A K-D tree has an attribute called cutting edge which denotes the dimension of comparison for a given level in the tree.

A node is inserted by comparing the dimension of the new node and parent corresponding to the cutting edge.

Code:
#include <stdio.h>
#include <stdlib.h>

typedef struct KDTree
{
    int dl,dr;
    int cuttingEdge;
    struct KDTree *left,*right,*parent;
}node;

node* createNode(int data_left, int data_right)
{
    node *newNode = (node*)malloc(sizeof(node));

    newNode->dl = data_left;
    newNode->dr = data_right;
    newNode->cuttingEdge = 0;
    newNode->parent = NULL;
    newNode->left = NULL;
    newNode->right = NULL;

    return newNode;
}

node* findNode(node *root, node *temp)
{
    //root = NULL
    if(!root){
        return temp;
    }

    if(root->cuttingEdge==0){
        if(root->dl > temp->dl){
            if(root->left!=NULL){
                root->left = findNode(root->left,temp);
            }
            else{
                temp->cuttingEdge = 1;
                root->left = temp;
                return root;
            }
        }
        else{
            if(root->right!=NULL){
                root->right = findNode(root->right,temp);
            }
            else{
                temp->cuttingEdge = 1;
                root->right = temp;
                return root;
            }
        }
    }
    else if(root->cuttingEdge==1){
        if(root->dr > temp->dr){
            if(root->left!=NULL){
                root->left = findNode(root->left,temp);
            }
            else{
                root->left = temp;
                return root;
            }
        }
        else{
            if(root->right!=NULL){
                root->right = findNode(root->right,temp);
            }
            else{
                root->right = temp;
                return root;
            }
        }
    }
}

node* insertNode(node *root, int data_left, int data_right)
{
    node *temp = createNode(data_left,data_right);

    root = findNode(root,temp);

    return root;
}

void preOrder(node *root)
{
    if(!root){return;}

    printf("(%d,%d) ",root->dl,root->dr);
    preOrder(root->left);
    preOrder(root->right);
}

void main()
{
    node* root=NULL;

    int choice = 1,a,b;

    while(choice)
    {
        printf("Enter Num 1 and Num 2\n");
        scanf("%d %d",&a,&b);

        root = insertNode(root,a,b);

        printf("1: continue 0: end >>> ");
        scanf("%d",&choice);
    }

    printf("Preorder traversal: ");
    preOrder(root);
    printf("\n");
}

Input / Output:
Enter Num 1 and Num 2
2
5
1: continue 0: end >>> 1
Enter Num 1 and Num 2
4
12
1: continue 0: end >>> 1
Enter Num 1 and Num 2
1
32
1: continue 0: end >>> 1
Enter Num 1 and Num 2
1
16
1: continue 0: end >>> 1
Enter Num 1 and Num 2
5
45
1: continue 0: end >>> 1
Enter Num 1 and Num 2
8
56
1: continue 0: end >>> 1
Enter Num 1 and Num 2
2
21
1: continue 0: end >>> 0
Preorder traversal: (2,5) (1,32) (1,16) (4,12) (5,45) (2,21) (8,56)


Result:
KD tree was successfully created and traversed in the pre-order manner.

Conclusion:
The KD tree is similar to binary search tree with an addition of the cutting edge feature.

